@using  Carlton.Base.Client.Events
@using  Newtonsoft.Json

<div class="test-bed">
    <div class="component">
        @TestComponentFragment
    </div>
</div>

@code {

    private Type _componentType;
    [Parameter]
    public Type ComponentType
    {
        get { return _componentType; }
        set
        {
            if(!(typeof(ComponentBase).IsAssignableFrom(value)))
                throw new InvalidOperationException($"{value.GetType()} is not a valid component type.");
            _componentType = value;
        }
    }

    [Parameter]
    public object ViewModel { get; set; }

    [Parameter]
    public EventCallback ComponentEventCallback { get; set; }

    [Parameter]
    public bool IsCarltonComponent { get; set; }

    private RenderFragment TestComponentFragment { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        TestComponentFragment = builder =>
        {
            builder.OpenElement(1, "div");
            builder.OpenComponent(2, ComponentType);

            if(IsCarltonComponent)
            {
                builder.AddAttribute(1, "ViewModel", ViewModel);

                if(ComponentEventCallback.HasDelegate)
                    builder.AddAttribute(2, "OnComponentEvent", ComponentEventCallback);
            }
            else
            {
                var i = 1;
                var componentParameters = (IDictionary<string, object>)ViewModel;
                foreach(var key in componentParameters.Keys)
                {
                    builder.AddAttribute(i, key, componentParameters[key]);
                }
            }

            builder.CloseComponent();
            builder.CloseElement();
        };
    }
}
