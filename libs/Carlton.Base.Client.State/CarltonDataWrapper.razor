@using MediatR

@implements IDisposable
@typeparam TViewModel

@ChildComponent(Context)

@code{
    [Parameter]
    public RenderFragment<CarltonDataWrapperContext<TViewModel>> ChildComponent { get; set; }

    [Parameter]
    public string[] StateEvents { get; set; } = new string[] { };

    [Inject]
    private IMediator Mediatr { get; set; }

    [Inject]
    private ICarltonRequestFactory factory { get; set; }

    [Inject]
    private ICarltonStateStore State { get; set; }

    protected CarltonDataWrapperContext<TViewModel> Context { get; set; }

    protected async override Task OnInitializedAsync()
    {
        //Register State Changed Handler
        State.StateChanged += OnStateChanged;

        ////Get VM and initalize context for wrapped component
        var vm = await GetViewModel();
        Context = new CarltonDataWrapperContext<TViewModel>(vm, OnComponentEvent);

        //Continue initilization
        await base.OnInitializedAsync();
    }

    protected async Task<TViewModel> GetViewModel()
    {
        return await Mediatr.Send(factory.GetViewModelRequest<TViewModel>());
    }

    private async Task OnComponentEvent(object evt)
    {
        var request = (IRequest<Unit>)factory.GetComponentEventRequest(this, evt);
        await Mediatr.Send(request);
    }

    private async Task OnStateChanged(object sender, string stateEvent)
    {
        Console.WriteLine($"Maade it to onStateChanged: {sender},  {stateEvent}");

        if(sender == this)
            return;

        if(!StateEvents.Contains(stateEvent))
            return;


        Context.ViewModel = await GetViewModel();
        StateHasChanged();
    }

    public void Dispose()
    {
        State.StateChanged -= OnStateChanged;
    }
}