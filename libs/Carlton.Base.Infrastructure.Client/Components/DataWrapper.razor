@namespace Carlton.Base.Infastructure.Client.Components
@using MediatR
@using Carlton.Base.Infastructure.Client.Data
@using Carlton.Base.Infastructure.Client.Events
@using Microsoft.AspNetCore.Components
@typeparam TViewModel

<div class="carlton-data-wrapper">
    @ChildComponent(Context)
</div>


@code{
    [Parameter]
    public RenderFragment<ComponentDataWrapperContext<TViewModel>> ChildComponent { get; set; }

    [Inject]
    private IDataService<TViewModel> DataService { get; set; }

    [Inject]
    private IMediator Mediatr { get; set; }

    private ComponentDataWrapperContext<TViewModel> Context { get; set; }
    private TViewModel ViewModel { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ViewModel = DataService.GetViewModel();
        Context = new ComponentDataWrapperContext<TViewModel>(ViewModel, ComponentEventHandler);
        DataService.ViewModelChanged += DataService_ViewModelChanged;
    }

    private void DataService_ViewModelChanged(object sender, ViewModelChangedEventArgs e)
    {
        ViewModel = DataService.GetViewModel();
    }


    public async Task<IComponentEventResult> ComponentEventHandler(IComponentEvent<IComponentEventResult> evt)
    {
        return await Mediatr.Send(evt);
    }
}