@namespace Carlton.Base.Infrastructure.Client.Components.TestBed
@using  Carlton.Base.Infrastructure.Client.Events
@using  Newtonsoft.Json
@inject TestBedService TestBedService

<div class="test-bed">
    <div class="component">
        @TestComponentFragment
    </div>
</div>

@code {
    [Parameter]
    public Type ComponentType
    {
        get { return componentType; }
        set
        {
            if(!(typeof(ComponentBase).IsAssignableFrom(value)))
                throw new InvalidOperationException("ComponentType is not a valid component type.");
            componentType = value;
        }
    }
    private Type componentType;

    [Parameter]
    public object ViewModel { get; set; }

    [Parameter]
    public EventCallback<object> ViewModelChanged { get; set; }

    private RenderFragment TestComponentFragment { get; set; }

    private delegate Task ComponentEventDel(IComponentEvent evt);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        TestBedService.ComponentChanged += (sender, args) =>
        {
            ViewModel = TestBedService.ViewModel;
            StateHasChanged();
        };
    }

    protected override void OnParametersSet()
    {
        TestComponentFragment = builder =>
        {
            ComponentEventDel del = ComponentEventHandler;
            var eventCallback = new EventCallback<IComponentEvent>(this, del);


            builder.OpenElement(1, "div");
            builder.OpenComponent(2, ComponentType);
            builder.AddAttribute(1, "ViewModel", ViewModel);
            builder.AddAttribute(2, "Test", eventCallback);

            builder.CloseComponent();
            builder.CloseElement();
        };

        TestBedService.ViewModel = ViewModel;
    }

    private Task ComponentEventHandler(IComponentEvent evt)
    {
        TestBedService.FireEvent(this, evt);
        return Task.CompletedTask;
    }
}
