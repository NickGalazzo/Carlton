@typeparam TNode

<div class="base-tree @(Visible ? "" : "base-tree-hidden")">

    @foreach(var node in Nodes ?? Enumerable.Empty<TNode>())
    {
        var nodeExpanded = ExpandedNodes.Contains(node);
        var nodeSelected = node.Equals(SelectedNode);
        var hasChildren = HasChildNodes(node);

        <div class="row">
            <span @onclick="@(() => OnToggleNode(node, !nodeExpanded))">
                <i class="base-tree-icon @(hasChildren ? "": "invisible") @(nodeExpanded ? Style.CollapseNodeIconClass : Style.ExpandNodeIconClass)"></i>
            </span>
            <span class="base-tree-title @Style.NodeTitleClass @(nodeSelected ? Style.NodeTitleSelectedClass : "") align-middle" @onclick="@(() => OnSelectNode(node))">
                @TitleTemplate(node)
            </span>
        </div>
        @if(hasChildren)
        {
            <Tree Nodes="ChildSelector(node)"
                             TitleTemplate="TitleTemplate"
                             ChildSelector="ChildSelector"
                             ExpandedNodes="ExpandedNodes"
                             ExpandedNodesChanged="ExpandedNodesChanged"
                             SelectedNode="SelectedNode"
                             SelectedNodeChanged="SelectedNodeChanged"
                             Visible="nodeExpanded"
                             HasChildNodes="HasChildNodes" />
        }
    }
</div>

@code {

    [Parameter] public IEnumerable<TNode> Nodes { get; set; }

    [Parameter] public RenderFragment<TNode> TitleTemplate { get; set; }

    [Parameter] public TNode SelectedNode { get; set; }

    [Parameter] public EventCallback<TNode> SelectedNodeChanged { get; set; }

    [Parameter] public Func<TNode, IEnumerable<TNode>> ChildSelector { get; set; }

    [Parameter] public IList<TNode> ExpandedNodes { get; set; } = new List<TNode>();

    [Parameter] public EventCallback<IList<TNode>> ExpandedNodesChanged { get; set; }

    [Parameter] public TreeStyle Style { get; set; } = TreeStyle.DefaultTreeStyle;

    [Parameter] public bool Visible { get; set; } = true;

    [Parameter] public Func<TNode, bool> HasChildNodes { get; set; } = node => true;

    private void OnToggleNode(TNode node, bool expand)
    {
        var expanded = ExpandedNodes.Contains(node);

        if(expanded && !expand)
        {
            ExpandedNodes.Remove(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
        else if(!expanded && expand)
        {
            ExpandedNodes.Add(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
    }

    private void OnSelectNode(TNode node)
    {
        if(HasChildNodes.Invoke(node))
        {
            OnToggleNode(node, !ExpandedNodes.Contains(node));
        }
        else
        {
            SelectedNode = node;
            SelectedNodeChanged.InvokeAsync(node);
        }
    }
}