@using Carlton.Base.Client.Components.Layouts
@using Carlton.Base.Client.State
@using Carlton.TestBed.Client.Shared.Header
@using Carlton.TestBed.Client.Shared.NavTree
@using Carlton.TestBed.Client.Shared.ComponentViewer
@using Carlton.TestBed.Client.Shared.Panel 
@using Carlton.TestBed.Client.State

@inherits LayoutComponentBase

<CarltonDashboardLayout>
    <HeaderContent>
        <Header />
    </HeaderContent>

    <Body>

        <Carlton.Base.Client.Components.ResizablePanel.ResizablePanel>
            <TopContent>
                <div>Top</div>
            </TopContent>
            <BottomContent>
                <div>Bottom</div>
            </BottomContent>
        </Carlton.Base.Client.Components.ResizablePanel.ResizablePanel>
        @*<CarltonDataWrapper TViewModel="ComponentViewerViewModel"
                                 StateEvents="@x">
            <ChildComponent>

                <ComponentViewer ViewModel="@context.ViewModel"
                                 OnComponentEvent="@context.OnComponentEvent"
                                 ComponentStatus="ComponentStatus.SYNCED"/>
            </ChildComponent>
        </CarltonDataWrapper>*@
    </Body>

    <NavContent>
        <CarltonDataWrapper TViewModel="NavTreeViewModel">
            <ChildComponent>
                <NavTree ViewModel="@context.ViewModel"
                         OnComponentEvent="@context.OnComponentEvent"
                         ComponentStatus="ComponentStatus.SYNCED" />
            </ChildComponent>
        </CarltonDataWrapper>
    </NavContent>

    @*<PanelContent>
        <Panel />
    </PanelContent>*@
</CarltonDashboardLayout>


@code {

    ElementReference body;

    private string [] x = new string[] {
                                             TestBedState.SELECTED_ITEM ,
                                             TestBedState.VIEW_MODEL_CHANGED,
                                             TestBedState.STATUS_CHANGED
                                            };
}







