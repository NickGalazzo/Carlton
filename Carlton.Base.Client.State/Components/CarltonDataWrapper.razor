@using MediatR
@using Microsoft.AspNetCore.Components
@using Carlton.Base.Client.State.Contracts

@namespace Carlton.Base.Client.State.Components


@typeparam TViewModel
@typeparam TState

<div class="carlton-data-wrapper">
    @ChildComponent(Context)
</div>


@code{
    [Parameter]
    public RenderFragment<ComponentDataWrapperContext<TViewModel>> ChildComponent { get; set; }

    [Inject]
    private IMediator Mediatr { get; set; }

    [Inject]
    private ICarltonEventRequestMapper<TViewModel> Mapper { get; set; }

    [Inject]
    private ICarltonRefreshCondition<TState, TViewModel> RefreshCondition { get; set; }

    [Inject]
    private ICarltonStateStore<TState> Store { get; set; }

    private ComponentDataWrapperContext<TViewModel> Context { get; set; }

    protected async override Task OnInitializedAsync()
    {
        //Get VM and initalize context for wrapped component
        var vm = await Mediatr.Send<TViewModel>(Mapper.GetViewModelRequest).ConfigureAwait(false);
        Context = new ComponentDataWrapperContext<TViewModel>(vm, ComponentEventHandler);

        //Register State Changed Handler
        Store.StateChanged += OnStateChanged;

        //Continue initilization
        await base.OnInitializedAsync();
    }

    private async void OnStateChanged(object sender, StateChangedEventArgs<TState> args)
    {
        if(!RefreshCondition.ShouldRefreshState(args))
            return;

        await SendAndReplace(Mapper.GetViewModelRequest);
    }

    public async Task ComponentEventHandler(IComponentEvent<TViewModel> evt)
    {
        var request = Mapper.MapToRequest(evt);
        await SendAndReplace(request);
    }

    private async Task SendAndReplace(ICarltonComponentRequest<TViewModel> request)
    {
        var vm = await Mediatr.Send(request).ConfigureAwait(false);
        Context.ReplaceViewModel(vm);
    }
}