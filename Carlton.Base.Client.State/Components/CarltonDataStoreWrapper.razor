@using Microsoft.AspNetCore.Components
@using Carlton.Base.Client.State.Contracts

@namespace Carlton.Base.Client.State.Components

@typeparam TViewModel

@inherits CarltonDataWrapper<TViewModel>
@implements IDisposable

@code{
    [Parameter]
    public string[] StateEvents { get; set; }

    [Inject]
    private ICarltonStateStore Store { get; set; }

    protected async override Task OnInitializedAsync()
    {
        //Register State Changed Handler
        Store.StateChanged += OnStateChanged;

        //Continue initilization
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Store.StateChanged -= OnStateChanged;
    }


    private async void OnStateChanged(object sender, string stateEvent)
    {
        if(ChildComponent.Target == sender)
            return;

        if(StateEvents.Contains(stateEvent))
            await base.GetViewModel();
    }
}