@using MediatR
@using Microsoft.AspNetCore.Components
@using Carlton.Base.Client.State.Contracts

@namespace Carlton.Base.Client.State.Components

@typeparam TViewModel

<div class="carlton-data-wrapper">
    @ChildComponent(Context)
</div>


@code{
    [Parameter]
    public RenderFragment<ComponentDataWrapperContext> ChildComponent { get; set; }

    [Inject]
    private IMediator Mediatr { get; set; }

    [Inject]
    private ICarltonEventRequestMapper<TViewModel> Mapper { get; set; }

    private ICarltonDataStore Store { get; set; }

    private ComponentDataWrapperContext Context { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Context = new ComponentDataWrapperContext(ComponentEventHandler);
        Store.StateChanged += (o, oo) =>
        {

        };
    }

    public async Task ComponentEventHandler(IComponentEvent evt)
    {
        var request = Mapper.MapToRequest(evt);
        var vm = await Mediatr.Send<TViewModel>(request).ConfigureAwait(false);
        Context.ReplaceViewModel(vm);
        this.StateHasChanged();
    }

    public class ComponentDataWrapperContext
    {
        public TViewModel ViewModel { get; private set; }
        public Func<IComponentEvent, Task> ComponentEventHandler { get; }

        public ComponentDataWrapperContext(Func<IComponentEvent, Task> componentEventHandler)
        {
            ComponentEventHandler = componentEventHandler;
        }

        public void ReplaceViewModel(TViewModel vm)
        {
            ViewModel = vm;
        }
    }
}