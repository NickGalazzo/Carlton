@typeparam TViewModel

@inherits CarltonDataWrapper<TViewModel>
@implements IDisposable

@ChildComponent(Context)


@code{
    [Parameter]
    public string[] StateEvents { get; set; } = new string[] { };

    [Inject]
    private ICarltonStateStore Store { get; set; }

    protected async override Task OnInitializedAsync()
    {
        //Register State Changed Handler
        Store.StateChanged += OnStateChanged;

        //Continue initilization
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Store.StateChanged -= OnStateChanged;
    }

    private void OnStateChanged(object sender, string stateEvent)
    {
        Console.WriteLine($"Maade it to onStateChanged: {sender},  {stateEvent}");

        ////if(ChildComponent.Target == sender)
        ////    return;

        if(!StateEvents.Contains(stateEvent))
            return;


        Context.ViewModel = GetViewModel().Result;
        StateHasChanged();
    }
}