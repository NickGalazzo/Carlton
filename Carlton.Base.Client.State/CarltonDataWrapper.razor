@using MediatR

@typeparam TViewModel

<div class="carlton-data-wrapper">
    @ChildComponent(Context)
</div>

@code{
    [Parameter]
    public RenderFragment<CarltonDataWrapperContext<TViewModel>> ChildComponent { get; set; }

    [Inject]
    private IMediator Mediatr { get; set; }

    [Inject]
    private ICarltonRequestFactory factory { get; set; }

    [Inject]
    private ICarltonStateStore State { get; set; }

    protected CarltonDataWrapperContext<TViewModel> Context { get; set; }

    protected async override Task OnInitializedAsync()
    {
        ////Get VM and initalize context for wrapped component
        var vm = await GetViewModel();
        Context = new CarltonDataWrapperContext<TViewModel>(vm, OnComponentEvent);

        //Continue initilization
        await base.OnInitializedAsync();
    }

    protected async Task<TViewModel> GetViewModel()
    {
        return await Mediatr.Send(factory.GetViewModelRequest<TViewModel>());
    }

    private async Task OnComponentEvent(object evt)
    {
        var request = (IRequest<Unit>)factory.GetComponentEventRequest(ChildComponent.Target, evt);
        await Mediatr.Send(request).ConfigureAwait(false);
    }
}